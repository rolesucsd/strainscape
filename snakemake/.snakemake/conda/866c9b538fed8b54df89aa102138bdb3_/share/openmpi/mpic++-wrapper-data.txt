# There can be multiple blocks of configuration data, chosen by
# compiler flags (using the compiler_args key to chose which block
# should be activated.  This can be useful for multilib builds.  See the
# multilib page at:
#    https://github.com/open-mpi/ompi/wiki/compilerwrapper3264
# for more information.

project=Open MPI
project_short=OMPI
version=4.1.6
language=C++
compiler_env=CXX
compiler_flags_env=CXXFLAGS
compiler=x86_64-conda-linux-gnu-c++
preprocessor_flags=   
compiler_flags_prefix=
compiler_flags=-pthread -I/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/include
linker_flags=  -L/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/lib -Wl,-rpath,/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/lib
# Note that per https://svn.open-mpi.org/trac/ompi/ticket/3422, we
# intentionally only link in the MPI libraries (ORTE, OPAL, etc. are
# pulled in implicitly) because we intend MPI applications to only use
# the MPI API.
libs= -lmpi
libs_static= -lmpi -lopen-rte -lopen-pal -lm -ldl -lutil  -lz
dyn_lib_file=libmpi.so
static_lib_file=libmpi.a
required_file=
includedir=${includedir}
libdir=${libdir}
