# There can be multiple blocks of configuration data, chosen by
# compiler flags (using the compiler_args key to chose which block
# should be activated.  This can be useful for multilib builds.  See the
# multilib page at:
#    https://github.com/open-mpi/ompi/wiki/compilerwrapper3264
# for more information.

project=Open Run-Time Environment (ORTE)
project_short=ORTE
version=4.1.6
language=C
compiler_env=CC
compiler_flags_env=CFLAGS
compiler=x86_64-conda-linux-gnu-cc
preprocessor_flags=   
compiler_flags_prefix=
compiler_flags=-pthread -I/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/include
linker_flags=  -L/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/lib -Wl,-rpath,/ddn_scratch/roles/strain_analysis/iHMP/strainscape/snakemake/.snakemake/conda/866c9b538fed8b54df89aa102138bdb3_/lib
# Note that per https://svn.open-mpi.org/trac/ompi/ticket/3422, we
# intentionally always link in open-pal and open-rte in
# ortecc/ortec++ because we intend ORTE applications to use both the
# ORTE and OPAL APIs.
libs=-lopen-rte -lopen-pal
libs_static=-lopen-rte -lopen-pal -lm -ldl -lutil 
dyn_lib_file=libopen-rte.so
static_lib_file=libopen-rte.a
required_file=
includedir=${includedir}
libdir=${libdir}
